#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <DHT.h>
#include <ESP8266HTTPClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Pin assignments for ESP8266
#define HW827_PIN A0
#define DHTPIN 2
#define DHTTYPE DHT11
#define ONE_WIRE_BUS D6

// WiFi credentials
const char* ssid = "safayet";
const char* password = "12345678";

// Telegram bot credentials
const char* botToken = "7238921803:AAHaT7X_38IwZ5SH5y6eWeAzFTvc_aNm6Uc";
const char* chatID = "5917006885";

// Server details for POST request
const char* serverURL = "https://hospital.rakibulislam.tech/hms/Micro_Project/post.php";
const char* apiKey = "1234";

// Initialize sensors and LCD
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature ds18b20(&oneWire);

// Variables to store sensor readings
float temperatureHW827, temperatureDHT, humidityDHT, temperatureDS18B20;

void setup() {
    Serial.begin(115200);
    Wire.begin(D2, D1);
    lcd.begin(16, 2);
    lcd.backlight();
    pinMode(HW827_PIN, INPUT);
    dht.begin();
    ds18b20.begin();

    // Connect to WiFi
    Serial.println("Connecting to WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\nWiFi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    lcd.setCursor(0, 0);
    lcd.print("Connected to WiFi");
    delay(2000);
    lcd.clear();
}

void loop() {
    int rawReading = analogRead(HW827_PIN);
    temperatureHW827 = map(rawReading, 0, 1023, 0, 120);
    temperatureDHT = dht.readTemperature();
    humidityDHT = dht.readHumidity();
    ds18b20.requestTemperatures();
    temperatureDS18B20 = ds18b20.getTempCByIndex(0);

    if (isnan(temperatureDHT) || isnan(humidityDHT)) {
        Serial.println("Failed to read from DHT sensor!");
        lcd.clear();
        lcd.setCursor(0, 1);
        lcd.print("DHT Error");
        return;
    }

    // Print sensor data to Serial Monitor
    Serial.printf("HW-827 BP: %.2f mmHg | DHT Temp: %.2f °C | Humidity: %.2f %% | DS18B20 Temp: %.2f °C\n",
                  temperatureHW827, temperatureDHT, humidityDHT, temperatureDS18B20);

    // Update LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("BP: " + String(temperatureHW827) + " BPM");
    lcd.setCursor(0, 1);
    lcd.print("T: " + String(temperatureDS18B20) + "C " + "H: " + String(humidityDHT) + "%");

    

    // Send data to the server (POST request)
    WiFiClientSecure serverClient;
    serverClient.setInsecure(); // Use insecure for HTTPS without CA cert
    HTTPClient http;

    if (http.begin(serverClient, serverURL)) {
        http.addHeader("Content-Type", "application/x-www-form-urlencoded");

        String postData = "api_key=" + String(apiKey) +
                          "&SensorData=DS18B20_DHT_HW827" +
                          "&LocationData=Room1" +
                          "&value1=" + String(temperatureDS18B20) +
                          "&value2=" + String(temperatureDHT) +
                          "&value3=" + String(humidityDHT) +
                          "&value4=" + String(temperatureHW827);

        int responseCode = http.POST(postData);
        String responseBody = http.getString();  // Get the body of the response

        if (responseCode > 0) {
            Serial.print("Server Response Code: ");
            Serial.println(responseCode);
            Serial.println("Server Response Body: " + responseBody);
        } else {
            Serial.print("Server POST Error Code: ");
            Serial.println(responseCode);
            Serial.println("Server Error Body: " + responseBody);
        }
        http.end();
    } else {
        Serial.println("Unable to connect to server.");
    }

    // Send data to Telegram (GET request)
    WiFiClientSecure telegramClient;
    telegramClient.setInsecure();// Disable certificate validation for Telegram
    HTTPClient telegramHttp;
    

    String message = "HW-827 Blood Pressure: " + String(temperatureHW827) + "%20BPM%20|%20" +
                     "DHT Temperature: " + String(temperatureDHT) + "%20°C%20|%20" +
                     "Humidity: " + String(humidityDHT) + "%25";

    String telegramURL = "https://api.telegram.org/bot" + String(botToken) +
                         "/sendMessage?chat_id=" + String(chatID) +
                         "&text=" + message;

    if (telegramHttp.begin(telegramClient, telegramURL)) {
        int telegramResponseCode = telegramHttp.GET();
        if (telegramResponseCode > 0) {
            Serial.print("Telegram Response code: ");
            Serial.println(telegramResponseCode);
        } else {
            Serial.print("Telegram Error code: ");
            Serial.println(telegramResponseCode);
        }
        telegramHttp.end();
    } else {
        Serial.println("Unable to connect to Telegram.");
    }

    delay(1000); // Wait 5 seconds before next iteration
}
